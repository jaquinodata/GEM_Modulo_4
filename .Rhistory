interaccion_MTenure_MgrSkill  ))
library(dplyr)
datos31 <- datos |>
mutate(
interaccion_CTenure_CrewSkill = CTenure * CrewSkill,
interaccion_MTenure_MgrSkill  = MTenure * MgrSkill
) |>
select(c(Sales, Profit, MTenure, CTenure, Pop, Comp, CrewSkill, MgrSkill, ServQual, interaccion_CTenure_CrewSkill,
interaccion_MTenure_MgrSkill  ))
names(datos31)
# 1. Ajustar el modelo
modelo31 <- lm(data = datos_estandarizados, formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp + CrewSkill + MgrSkill + ServQual + interaccion_CTenure_CrewSkill + interaccion_MTenure_MgrSkill )
View(datos3)
datos31 <- datos |>
mutate(
interaccion_CTenure_CrewSkill = CTenure * CrewSkill,
interaccion_MTenure_MgrSkill  = MTenure * MgrSkill
) |>
select(c(Sales, Profit, MTenure, CTenure, Pop, Comp, CrewSkill, MgrSkill, ServQual, interaccion_CTenure_CrewSkill,
interaccion_MTenure_MgrSkill  )) |>
scale() |>
as.data.frame()
View(datos31)
# 1. Ajustar el modelo
modelo31 <- lm(data = datos31, formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp + CrewSkill + MgrSkill + ServQual + interaccion_CTenure_CrewSkill + interaccion_MTenure_MgrSkill )
# 2. Realizar pruebas de diagnóstico
hom <- bptest(modelo31)
library(lmtest)
library(lmtest)
hom <- bptest(modelo31)
aut <- bgtest(modelo31)
nor <- jarque.bera.test(residuals(modelo31))
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
install.packages("normtest")
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(normtest)
install.packages("normtest")
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
install.packages("normtest")
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(normtest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(nortest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
hom <- bptest(modelo31)
aut <- bgtest(modelo31)
nor <- jarque.bera.test(residuals(modelo31))
summary(modelo31)
datos <- read_excel("../store24_data.xls", sheet ="Store24")
library(readxl)
library(tidyverse)
library(dplyr)
library(magrittr)
library(lmtest)
library(tseries)
library(purrr)
library(tibble)
library(dplyr)
library(lmtest)
library(nortest) ###REALIZA 5 PRUEBAS DE NORMALIDAD###
library(readxl)
library(tidyverse)
library(dplyr)
library(magrittr)
library(lmtest)
library(tseries)
library(purrr)
library(tibble)
library(dplyr)
library(lmtest)
library(nortest) ###REALIZA 10 PRUEBAS DE NORMALIDAD###
library(readxl)
library(tidyverse)
library(dplyr)
library(magrittr)
library(lmtest)
library(tseries)
library(purrr)
library(tibble)
library(dplyr)
library(lmtest)
datos <- read_excel("../store24_data.xls", sheet ="Store24")
datos31 <- datos |>
mutate(
interaccion_CTenure_CrewSkill = CTenure * CrewSkill,
interaccion_MTenure_MgrSkill  = MTenure * MgrSkill
) |>
select(c(Sales, Profit, MTenure, CTenure, Pop, Comp, CrewSkill, MgrSkill, ServQual, interaccion_CTenure_CrewSkill,
interaccion_MTenure_MgrSkill  )) |>
scale() |>
as.data.frame()
modelo31 <- lm(data = datos31, formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp + CrewSkill + MgrSkill + ServQual +
interaccion_CTenure_CrewSkill + interaccion_MTenure_MgrSkill )
indice_entrenamiento <- createDataPartition(datos31$Profit, p = 0.8, list = FALSE)
library(caret)
# Establecer semilla para reproducibilidad
set.seed(123)
# Dividir el conjunto de datos en entrenamiento (80%) y prueba (20%)
indice_entrenamiento <- createDataPartition(datos31$Profit, p = 0.8, list = FALSE)
datos3_entrenamiento <- datos3[indice_entrenamiento, ]
datos3_prueba <- datos3[-indice_entrenamiento, ]
indice_entrenamiento <- createDataPartition(datos31$Profit, p = 0.8, list = FALSE)
datos31_entrenamiento <- datos3[indice_entrenamiento, ]
datos31_prueba <- datos3[-indice_entrenamiento, ]
datos3_entrenamiento <- datos3[indice_entrenamiento, ]
datos3_prueba <- datos3[-indice_entrenamiento, ]
X31_entrenamiento <- datos31_entrenamiento[, !(names(datos31_entrenamiento) %in% "Profit")]
y31_entrenamiento <- datos31_entrenamiento[, "Profit", drop = FALSE]
X31_prueba <- datos31_prueba[, !(names(datos31_prueba) %in% "Profit")]
y31_prueba <- datos31_prueba$Profit
# Separar las variables predictoras (X) y la variable objetivo (y)
X31_entrenamiento <- datos31_entrenamiento[, !(names(datos31_entrenamiento) %in% "Profit")]
y31_entrenamiento <- datos31_entrenamiento[, "Profit", drop = FALSE]
X31_prueba <- datos31_prueba[, !(names(datos31_prueba) %in% "Profit")]
y31_prueba <- datos31_prueba$Profit
# 1. Ajustar el modelo
modelo31 <- lm(data = cbind(X31_entrenamiento, y31_entrenamiento),, formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp + CrewSkill + MgrSkill + ServQual +
interaccion_CTenure_CrewSkill + interaccion_MTenure_MgrSkill )
# Obtener los coeficientes del modelo
coeficientes31 <- coef(modelo31)
# Crear un dataframe con los coeficientes
df31_coeficientes <- data.frame(
"Variable" = names(coeficientes31),
"Coeficiente" = coeficientes31
)
# Formatear la tabla con kable
tabla31_coeficientes <- knitr::kable(df2_coeficientes, align = "c", caption = "Coeficientes del Modelo de Regresión")
# Formatear la tabla con kable
tabla31_coeficientes <- knitr::kable(df31_coeficientes, align = "c", caption = "Coeficientes del Modelo de Regresión")
# Imprimir la tabla
print(tabla2_coeficientes)
# Formatear la tabla con kable
tabla31_coeficientes <- knitr::kable(df31_coeficientes, align = "c", caption = "Coeficientes del Modelo de Regresión")
# Imprimir la tabla
print(tabla31_coeficientes)
coeficientes31 <- coef(modelo3)[-1]  # Excluyendo el intercepto
# Extraer los coeficientes del modelo
coeficientes31 <- coef(modelo3)[-1]  # Excluyendo el intercepto
# Extraer los coeficientes del modelo
coeficientes31 <- coef(modelo31)[-1]  # Excluyendo el intercepto
# Crear un dataframe con los nombres de las variables y los coeficientes
coeficientes31_df <- data.frame(Variable = names(coeficientes1), Coeficiente = coeficientes31)
# Extraer los coeficientes del modelo
coeficientes31 <- coef(modelo31)[-1]  # Excluyendo el intercepto
# Crear un dataframe con los nombres de las variables y los coeficientes
coeficientes31_df <- data.frame(Variable = names(coeficientes), Coeficiente = coeficientes31)
# Extraer los coeficientes del modelo
coeficientes31 <- coef(modelo31)[-1]  # Excluyendo el intercepto
# Crear un dataframe con los nombres de las variables y los coeficientes
coeficientes31_df <- data.frame(Variable = names(coeficientes31), Coeficiente = coeficientes31)
# Ordenar el dataframe por los valores de los coeficientes
coeficientes31_df <- coeficientes31_df[order(coeficientes31_df$Coeficiente), ]
# Crear el gráfico de barras
grafico_coefs31 <- ggplot(coeficientes31_df, aes(x = reorder(Variable, Coeficiente), y = Coeficiente)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Coeficientes del Modelo de Regresión Lineal",
x = "Variable",
y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x
# Mostrar el gráfico
print(grafico_coefs31)
library(corrplot)
datos_numericos <- subset(datos, select = -c(store))
datos_numericos
correlacion <- round(cor(datos_numericos), 1)
correlacion
corrplot(correlacion, method = "number", type = "upper", tl.cex = 0.8, tl.col = "black", number.cex = 0.7)
library(readxl)
library(tidyverse)
library(dplyr)
library(knitr)
library(ggplot2)
library(gridExtra)
library(corrgram)
library(caTools)
library(kableExtra)
library(formattable)
library(caret)
library(corrplot)
datos <- read_excel("../store24_data.xls", sheet = "Store24")
# Mostrar los datos utilizando la función kable
kable(head(datos, 10))
library(skimr)
select(datos, -c(store, Visibility, PedCount, Res, Hours24 )) |>
skim() |>
yank("numeric")
datos <- datos |>
mutate(
store      = as.character(store),
Visibility = as.character(Visibility),
PedCount   = as.character(PedCount),
Res        = as.character(Res),
Hours24    = as.character(Hours24)
)
View(datos)
plot1 <- ggplot(datos, aes(x = Visibility)) +
geom_bar(fill = "skyblue", color = "black") +
labs(title = "Frecuencia de Visibility", x = "Visibility", y = "")
plot2 <- ggplot(datos, aes(x = PedCount)) +
geom_bar(fill = "lightgreen", color = "black") +
labs(title = "Frecuencia de PedCount", x = "PedCount", y = "")
plot3 <- ggplot(datos, aes(x = Res)) +
geom_bar(fill = "orange", color = "black") +
labs(title = "Frecuencia de Res", x = "Res", y = "")
plot4 <- ggplot(datos, aes(x = Hours24)) +
geom_bar(fill = "lightpink", color = "black") +
labs(title = "Frecuencia de Hours24", x = "Hours24", y = "")
# Organizar los gráficos en un lienzo de 2 filas por 2 columnas
grid.arrange(plot1, plot2, plot3, plot4, nrow = 2, ncol = 2)
plot1 <- ggplot(datos, aes(x = Sales, y = Profit)) +
geom_point(color = "blue") +
labs(title = "Profit Vs Sales", x = "Sales", y = "Profit")
plot2 <- ggplot(datos, aes(x = Comp, y = Profit)) +
geom_point(color = "green") +
labs(title = "Profit vs Comp", x = "Comp", y = "Profit")
plot3 <- ggplot(datos, aes(x = PedCount, y = Profit)) +
geom_point(color = "red") +
labs(title = "Profit vs PedCount", x = "PEdCount", y = "Profit")
plot4 <- ggplot(datos, aes(x = MgrSkill, y = Profit)) +
geom_point(color = "purple") +
labs(title = "Profit vs MgrSkill", x = "MgrSkill", y = "Profit")
plot5 <- ggplot(datos, aes(x = ServQual, y = Profit)) +
geom_point(color = "purple") +
labs(title = "Profit vs ServQual", x = "ServQual", y = "Profit")
# Organizar los gráficos en un lienzo de 2 filas por 2 columnas
grid.arrange(plot1, plot2, plot3, plot4, plot5, nrow = 2, ncol = 3)
plot10 <- ggplot(datos, aes(x = Hours24, y = Profit)) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(title = "Boxplot de Profit por Hours24", x = "Hours24", y = "") +
theme_classic()
plot20 <- ggplot(datos, aes(x = Visibility, y = Profit)) +
geom_boxplot(fill = "green", color = "black") +
labs(title = "Boxplot de Profit por Visibility ", x = "Visibility", y = "") +
theme_classic()
plot30 <- ggplot(datos, aes(x = Hours24, y = Sales)) +
geom_boxplot(fill = "red", color = "black") +
labs(title = "Boxplot de Ventas por Hours24", x = "Hours24", y = "") +
theme_classic()
plot40 <- ggplot(datos, aes(x = Visibility, y = Sales)) +
geom_boxplot(fill = "purple", color = "black") +
labs(title = "Boxplot de Sales por Visibility", x = "Visibility", y = "") +
theme_classic()
# Organizar los gráficos en un lienzo de 2 filas por 2 columnas
grid.arrange(plot10, plot20, plot30, plot40, nrow = 2, ncol = 2)
plot11 <- ggplot(datos, aes(x = Res, y = Profit)) +
geom_boxplot(fill = "skyblue", color = "black") +
labs(title = "Profit por Zona Residencial", x = "Res", y = "") +
theme_classic()
plot12 <- ggplot(datos, aes(x = Res, y = Sales)) +
geom_boxplot(fill = "green", color = "black") +
labs(title = "Ventas por Zona Residencial", x = "Res", y = "") +
theme_classic()
# Organizar los gráficos en un lienzo de 1 fila por 2 columnas
grid.arrange(plot11, plot12, nrow = 1, ncol = 2, widths = c(0.2, 0.2))
# Seleccionar solo las columnas numéricas y excluir "store"
datos_numericos <- subset(datos, select = -c(store, Visibility,	PedCount,	Res,	Hours24))
# Calcular la matriz de correlación redondeada
correlacion <- round(cor(datos_numericos), 1)
# Crear el mapa de correlación con corrplot y ajustar el tamaño de los números
corrplot(correlacion, method = "number", type = "upper", tl.cex = 0.8, tl.col = "black", number.cex = 0.7)
outliers_count <- data.frame(Variable = character(), Outliers_Count = numeric())
for (variable in colnames(datos)) {
if (is.numeric(datos[[variable]]) && variable != "store") {
boxplot_stats <- boxplot.stats(datos[[variable]])
lower_whisker <- boxplot_stats$stats[1]
upper_whisker <- boxplot_stats$stats[5]
outliers <- datos[[variable]][datos[[variable]] < lower_whisker | datos[[variable]] > upper_whisker]
outliers_count <- rbind(outliers_count, data.frame(Variable = variable, Valores_Atípicos = length(outliers)))
}
}
# Mostrar la tabla con formato kable
kable(outliers_count, caption = "Conteo de valores atípicos por variable")
columnas_numericas <- datos |>
select(where(is.numeric)) |>
colnames()
# Estandarizar las columnas numéricas
datos_estandarizados <- datos |>
mutate(across(all_of(columnas_numericas), scale))
# Establecer semilla para reproducibilidad
set.seed(123)
# Crear partición estratificada
particion <- createDataPartition(datos_estandarizados$Profit, p = 0.8, list = FALSE)
# Crear conjuntos de entrenamiento y prueba
datos_entrenamiento <- datos_estandarizados[particion, ]
datos_prueba <- datos_estandarizados[-particion, ]
# Separar las variables predictoras (X) y la variable objetivo (y)
X_entrenamiento <- datos_entrenamiento[, !(names(datos_entrenamiento) %in% "Profit")]
y_entrenamiento <- datos_entrenamiento[, "Profit", drop = FALSE]
X_prueba <- datos_prueba[, !(names(datos_prueba) %in% "Profit")]
y_prueba <- datos_prueba$Profit
# Ajustar el modelo
modelo <- lm(data = cbind(X_entrenamiento, y_entrenamiento), formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp +  CrewSkill + MgrSkill + ServQual)
# Predecir utilizando el modelo
y_pred <- predict(modelo, newdata = X_prueba)
# Calcular RMSE
rmse <- sqrt(mean((y_prueba - y_pred)^2))
# Calcular R²
r2 <- cor(y_pred, y_prueba)^2
# Crear un data frame con los resultados
resultados <- data.frame(
"Métrica" = c("RMSE (Error Cuadrático Medio Raíz)", "R² (Coeficiente de Determinación)"),
"Valor" = c(rmse, r2)
)
# Formatear la tabla con knitr::kable
tabla_resultados <- knitr::kable(resultados, align = "c")
# Imprimir la tabla
print(tabla_resultados)
# Obtener los coeficientes del modelo
coeficientes <- coef(modelo)
# Crear un dataframe con los coeficientes
df_coeficientes <- data.frame(
"Variable" = names(coeficientes),
"Coeficiente" = coeficientes
)
# Formatear la tabla con kable
tabla_coeficientes <- knitr::kable(df_coeficientes, align = "c", caption = "Coeficientes del Modelo de Regresión")
# Imprimir la tabla
print(tabla_coeficientes)
# Extraer los coeficientes del modelo
coeficientes <- coef(modelo)[-1]  # Excluyendo el intercepto
# Crear un dataframe con los nombres de las variables y los coeficientes
coeficientes_df <- data.frame(Variable = names(coeficientes), Coeficiente = coeficientes)
# Ordenar el dataframe por los valores de los coeficientes
coeficientes_df <- coeficientes_df[order(coeficientes_df$Coeficiente), ]
# Crear el gráfico de barras
grafico_coefs <- ggplot(coeficientes_df, aes(x = reorder(Variable, Coeficiente), y = Coeficiente)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Coeficientes del Modelo de Regresión Lineal",
x = "Variable",
y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x
# Mostrar el gráfico
print(grafico_coefs)
# Obtener el resumen del modelo
summary_modelo <- summary(modelo)
# Extraer los coeficientes y los p-values
coeficientes <- summary_modelo$coefficients[, 1]
p_values <- summary_modelo$coefficients[, 4]
# Calcular el número de asteriscos basado en el valor absoluto del logaritmo negativo del p-value
num_asteriscos <- floor(-log10(p_values))
# Asegurarnos de que num_asteriscos sea un número entero positivo
num_asteriscos <- pmax(num_asteriscos, 0)
# Crear un vector de asteriscos
asteriscos <- ifelse(num_asteriscos > 0, paste(rep("*", max(num_asteriscos)), collapse = ""), "")
# Crear un dataframe con los coeficientes, los p-values y los asteriscos
df_coeficientes <- data.frame(
"Variable" = rownames(summary_modelo$coefficients),
"Coeficiente" = coeficientes,
"P-value" = p_values,
"Significancia" = asteriscos
)
# Imprimir el dataframe
print(df_coeficientes)
# Copio el Datframe
datos2 <- datos
# Crear las dos nuevas variable
datos2 <- datos2 |>
mutate(
interaccion_CTenure_CrewSkill = CTenure * CrewSkill,
interaccion_MTenure_MgrSkill  = MTenure * MgrSkill
) |>
select(c(Sales, Profit, MTenure, CTenure, Pop, Comp, CrewSkill, MgrSkill, ServQual, interaccion_CTenure_CrewSkill, interaccion_MTenure_MgrSkill  )) |>
scale() |>
as.data.frame()
# Establecer semilla para reproducibilidad
set.seed(123)
# Dividir el conjunto de datos en entrenamiento (80%) y prueba (20%)
indice_entrenamiento <- createDataPartition(datos2$Profit, p = 0.8, list = FALSE)
datos2_entrenamiento <- datos2[indice_entrenamiento, ]
datos2_prueba <- datos2[-indice_entrenamiento, ]
X2_entrenamiento <- datos2_entrenamiento[, !(names(datos2_entrenamiento) %in% "Profit")]
y2_entrenamiento <- datos2_entrenamiento[, "Profit", drop = FALSE]
X2_prueba <- datos2_prueba[, !(names(datos2_prueba) %in% "Profit")]
y2_prueba <- datos2_prueba$Profit
# Ver las dimensiones de los conjuntos de entrenamiento y prueba
dim(datos2_entrenamiento)
dim(datos2_prueba)
# Ajustar el modelo
modelo2 <- lm(data = cbind(X2_entrenamiento, y2_entrenamiento), formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp +  CrewSkill + MgrSkill + ServQual + interaccion_CTenure_CrewSkill + interaccion_MTenure_MgrSkill )
# Predecir utilizando el modelo
y2_pred <- predict(modelo2, newdata = X2_prueba)
# Calcular RMSE
rmse2 <- sqrt(mean((y2_prueba - y2_pred)^2))
# Calcular R²
r2 <- cor(y2_pred, y2_prueba)^2
# Crear un data frame con los resultados
resultados2 <- data.frame(
"Métrica" = c("RMSE (Error Cuadrático Medio Raíz)", "R² (Coeficiente de Determinación)"),
"Valor" = c(rmse2, r2)
)
# Formatear la tabla con knitr::kable
tabla2_resultados <- knitr::kable(resultados2, align = "c")
# Imprimir la tabla
print(tabla2_resultados)
# Obtener los coeficientes del modelo
coeficientes2 <- coef(modelo2)
# Crear un dataframe con los coeficientes
df2_coeficientes <- data.frame(
"Variable" = names(coeficientes2),
"Coeficiente" = coeficientes2
)
# Formatear la tabla con kable
tabla2_coeficientes <- knitr::kable(df2_coeficientes, align = "c", caption = "Coeficientes del Modelo de Regresión")
# Imprimir la tabla
print(tabla2_coeficientes)
# Extraer los coeficientes del modelo
coeficientes2 <- coef(modelo2)[-1]  # Excluyendo el intercepto
# Crear un dataframe con los nombres de las variables y los coeficientes
coeficientes2_df <- data.frame(Variable = names(coeficientes2), Coeficiente = coeficientes2)
# Ordenar el dataframe por los valores de los coeficientes
coeficientes2_df <- coeficientes2_df[order(coeficientes2_df$Coeficiente), ]
# Crear el gráfico de barras
grafico2_coefs <- ggplot(coeficientes2_df, aes(x = reorder(Variable, Coeficiente), y = Coeficiente)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Coeficientes del Modelo de Regresión Lineal",
x = "Variable",
y = "") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotar etiquetas del eje x
# Mostrar el gráfico
print(grafico2_coefs)
# Ajustar el modelo
modelo2 <- lm(data = cbind(X2_entrenamiento, y2_entrenamiento), formula = Profit ~ Sales + MTenure + CTenure + Pop + Comp +  CrewSkill + MgrSkill + ServQual +  interaccion_MTenure_MgrSkill )
datos_aumento <- data.frame(
store = c(9, 9),
Sales = c(2113089, 2747015.7),
Profit = c(474725, 901977.5),
MTenure = c(108.9935, 130.7922),
CTenure = c(6.061602, 7.2739224),
Pop = c(26519, 26519),
Comp = c(2.63763, 2.63763),
CrewSkill = c(3.22, 3.22),
MgrSkill = c(3.583333, 3.583333),
ServQual = c(100, 100)
)
# Aumentar en 0.5 años el valor de MTenure en el segundo conjunto de datos
datos_aumento$nueva_MTenure <- ifelse(datos_aumento$store == 9, datos_aumento$MTenure + 0.5, datos_aumento$MTenure)
# Realizar la predicción de las ganancias con el nuevo conjunto de datos
prediccion_ganancias <- predict(modelo2, newdata = datos_aumento)
# Crear un data frame con los datos proporcionados
datos6 <- data.frame(
store = c(9, 9),
Sales = c(2113089, 2747015.7),
Profit = c(474725, 901977.5),
MTenure = c(108.9935, 130.7922),
CTenure = c(6.061602, 7.2739224),
Pop = c(26519, 26519),
Comp = c(2.63763, 2.63763),
CrewSkill = c(3.22, 3.22),
MgrSkill = c(3.583333, 3.583333),
ServQual = c(100, 100)
)
# Aumentar en 0.5 años el valor de MTenure en el segundo conjunto de datos
datos6$nueva_MTenure <- ifelse(datos6$store == 9, datos6$MTenure + 0.5, datos6$MTenure)
# Realizar la predicción de las ganancias con el nuevo conjunto de datos
prediccion_ganancias <- predict(modelo2, newdata = datos6)
datos6 <- data.frame(
store = c(9, 9),
Sales = c(2113089, 2747015.7),
Profit = c(474725, 901977.5),
MTenure = c(108.9935, 130.7922),
CTenure = c(6.061602, 7.2739224),
Pop = c(26519, 26519),
Comp = c(2.63763, 2.63763),
CrewSkill = c(3.22, 3.22),
MgrSkill = c(3.583333, 3.583333),
ServQual = c(100, 100)
)
# Calcular la variable de interacción
datos6$interaccion_MTenure_MgrSkill <- datos6$MTenure * datos$MgrSkill
# Crear un data frame con los datos proporcionados
datos6 <- data.frame(
store = c(9, 9),
Sales = c(2113089, 2747015.7),
Profit = c(474725, 901977.5),
MTenure = c(108.9935, 130.7922),
CTenure = c(6.061602, 7.2739224),
Pop = c(26519, 26519),
Comp = c(2.63763, 2.63763),
CrewSkill = c(3.22, 3.22),
MgrSkill = c(3.583333, 3.583333),
ServQual = c(100, 100)
)
# Calcular la variable de interacción correctamente
datos6$interaccion_MTenure_MgrSkill <- datos6$MTenure * datos6$MgrSkill
# Aumentar en 0.5 años el valor de MTenure en el segundo conjunto de datos
datos6$nueva_MTenure <- ifelse(datos6$store == 9, datos6$MTenure + 0.5, datos6$MTenure)
# Aumentar la variable de interacción en consecuencia
datos6$nueva_interaccion_MTenure_MgrSkill <- ifelse(datos6$store == 9, datos6$interaccion_MTenure_MgrSkill + 0.5 * datos6$MgrSkill, datos6$interaccion_MTenure_MgrSkill)
# Realizar la predicción de las ganancias con el nuevo conjunto de datos
prediccion_ganancias <- predict(modelo2, newdata = datos6)
# Calcular el cambio en las ganancias para la tienda que aumentó sus años de servicio
cambio_ganancias_gerente <- prediccion_ganancias[2] - prediccion_ganancias[1]
# Definir la proporción de bonificación (por ejemplo, 10%)
proporcion_bonificacion <- 0.10
# Calcular la bonificación específica para el gerente de la tienda
bonificacion_gerente <- cambio_ganancias_gerente * proporcion_bonificacion
# Mostrar la bonificación específica para el gerente de la tienda
print(bonificacion_gerente)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(skimr)
select(datos, -c(store, Visibility, PedCount, Res, Hours24 )) |>
skim() |>
yank("numeric")
library(dplyr)
library(skimr)
select(datos, -c(store, Visibility, PedCount, Res, Hours24 )) |>
skim() |>
yank("numeric")
library(skimr)
library(skimr)
library(psych)
``{r echo=FALSE, warning=FALSE}
